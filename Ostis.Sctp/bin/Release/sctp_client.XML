<?xml version="1.0"?>
<doc>
    <assembly>
        <name>sctp_client</name>
    </assembly>
    <members>
        <member name="T:sctp_client.AResponse">
            <summary>
            Абстрактный класс ответа сервера
            </summary>
        </member>
        <member name="M:sctp_client.AResponse.#ctor(System.Byte[])">
            <summary>
            Конструктор класса <see cref="T:sctp_client.AResponse"/>
            </summary>
            <param name="bytesstream">Массив байт</param>
        </member>
        <member name="P:sctp_client.AResponse.BytesStream">
            <summary>
            Возвращает массив байт
            </summary>
        </member>
        <member name="P:sctp_client.AResponse.Header">
            <summary>
            Возвращает заголовок ответа
            </summary>
        </member>
        <member name="T:sctp_client.ResponseHeader">
            <summary>
            Заголовок ответа сервера
            </summary>
        </member>
        <member name="M:sctp_client.ResponseHeader.#ctor(System.Byte[])">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:sctp_client.ResponseHeader"/>
            </summary>
            <param name="bytesdata">Массив байт заголовка</param>
        </member>
        <member name="P:sctp_client.ResponseHeader.Leight">
            <summary>
            Длина заголовка
            </summary>
        </member>
        <member name="P:sctp_client.ResponseHeader.Code">
            <summary>
            Код команды, на которую получен ответ
            </summary>
        </member>
        <member name="P:sctp_client.ResponseHeader.Id">
            <summary>
            Уникальный идентификатор команды в потоке команд
            </summary>
        </member>
        <member name="P:sctp_client.ResponseHeader.ReturnCode">
             <summary>
            Возвращает код успешности выполнения команды
             </summary>
        </member>
        <member name="P:sctp_client.ResponseHeader.ReturnSize">
            <summary>
            Возвращает размер содержимого ответа
            </summary>
        </member>
        <member name="T:sctp_client.ACommand">
            <summary>
            Абстрактный класс комманды
            </summary>
        </member>
        <member name="M:sctp_client.ACommand.#ctor(System.Byte,System.Byte)">
            <summary>
            Конструктор класса <see cref="T:sctp_client.ACommand"/> 
            </summary>
            <param name="code">Код команды</param>
            <param name="flag">Флаг команды</param>
        </member>
        <member name="E:sctp_client.ACommand.CommandDone">
            <summary>
            Событие происходит при выполнении команды
            </summary>
        </member>
        <member name="P:sctp_client.ACommand.Arguments">
            <summary>
            Аргументы команды
            </summary>
        </member>
        <member name="P:sctp_client.ACommand.Id">
             <summary>
            Возвращает и задает уникальный идентификатор команды
             </summary>
             <value>
             Уникальный идентификатор команды
             </value>
        </member>
        <member name="P:sctp_client.ACommand.BytesStream">
            <summary>
            Возвращает массив байт команды
            </summary>
        </member>
        <member name="P:sctp_client.ACommand.Response">
            <summary>
            Возвращает и задает ответ сервера команды
            </summary>
        </member>
        <member name="T:sctp_client.CommandPool">
            <summary>
            Пулл команд для сервера. Соединение с сервером происходит при создании экземпляра класса
            </summary>
        </member>
        <member name="M:sctp_client.CommandPool.#ctor(System.String,System.Int32,sctp_client.ClientType)">
            <summary>
            Инициализирует пулл команд для сервера.
            </summary>
            <param name="address">Адрес сервера</param>
            <param name="port">Порт сервера</param>
            <param name="clienttype">Тип используемого клиента (синхронный/асинхронный)</param>
        </member>
        <member name="M:sctp_client.CommandPool.Send(sctp_client.ACommand)">
            <summary>
            Добавляет команду в поток команд и отправляет ее на сервер
            </summary>
            <param name="command">Команда</param>
        </member>
        <member name="M:sctp_client.CommandPool.Dispose">
            <summary>
            Выполняет определяемые приложением задачи, связанные с удалением, высвобождением или сбросом неуправляемых ресурсов. При этом пулл отсоединяется от сервера.
            </summary>
        </member>
        <member name="P:sctp_client.CommandPool.Connected">
            <summary>
            Возвращает значение, указывающее подключен ли клиент к серверу
            </summary>
            <value>
              <c>true</c> если подключен; в противном случае <c>false</c>.
            </value>
        </member>
        <member name="T:sctp_client.Arguments.DateTimeUNIX">
            <summary>
            Дата и время в форме Unix (http://en.wikipedia.org/wiki/Unix_time)
            </summary>
        </member>
        <member name="T:sctp_client.IArgument">
            <summary>
            Интерфейс аргумента для команд
            </summary>
        </member>
        <member name="P:sctp_client.IArgument.Length">
            <summary>
            Возвращает длину массива байт аргумента
            </summary>
        </member>
        <!-- Некорректный XML-комментарий для члена "P:sctp_client.IArgument.BytesStream" проигнорирован -->
        <member name="M:sctp_client.Arguments.DateTimeUNIX.#ctor(System.DateTime)">
            <summary>
            Инициализирует новую структуру <see cref="T:sctp_client.Arguments.DateTimeUNIX"/> 
            </summary>
            <param name="datetime">Дата и время <see cref="T:System.DateTime"/> </param>
        </member>
        <member name="M:sctp_client.Arguments.DateTimeUNIX.ToDateTime(sctp_client.Arguments.DateTimeUNIX)">
             <summary>
            Конвертирует дату и время Unix  в дату и время <see cref="T:System.DateTime"/>
             </summary>
             <param name="unixtime">Время DateTimeUnix</param>
             <returns></returns>
        </member>
        <member name="M:sctp_client.Arguments.DateTimeUNIX.ToDateTime(System.UInt64)">
            <summary>
            Конвертирует дату и время Unix  в дату и время <see cref="T:System.DateTime"/>
            </summary>
            <param name="milliseconds">Время в миллисекундах</param>
            <returns></returns>
        </member>
        <member name="P:sctp_client.Arguments.DateTimeUNIX.Length">
            <summary>
            Возвращает длину массива байт
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.DateTimeUNIX.BytesStream">
            <summary>
            Возвращает массив байт
            </summary>
        </member>
        <member name="T:sctp_client.Arguments.StatisticData">
            <summary>
            Статистика сервера для временной метки
            </summary>
        </member>
        <member name="M:sctp_client.Arguments.StatisticData.GetFromBytes(System.Byte[],System.Int32)">
            <summary>
            Создает новый экземпляр статистики для временой метки из массива байт
            </summary>
            <param name="bytesstream">Массив байт</param>
            <param name="offset">Смещение в массиве</param>
            <returns></returns>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.Time">
            <summary>
            Время временной метки
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.NodeCount">
            <summary>
            Общее количество sc-узлов, которые есть в sc-памяти (включая помеченные на удаление)
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.ArcCount">
            <summary>
            Общее количество sc-дуг, которые есть в sc-памяти (включая помеченные на удаление)
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.LinksCount">
            <summary>
            Общее количество sc-ссылок, которые есть в sc-памяти (включаея помеченные на удаление)
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.LiveNodeCount">
            <summary>
            Количество sc-узлов, которые не помечены на удалениеt.
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.LiveArcCount">
            <summary>
            Количество sc-дуг, которые не помечены на удаление
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.LiveLinkCount">
            <summary>
            Количество sc-ссылок, которые не помечены на удаление
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.EmptyCount">
            <summary>
             Количество пустых ячеек в sc-памяти
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.ConnectionsCount">
            <summary>
            Общее количество подключений клиентов к sctp серверу (не активных, а общее число включая и завершенные)
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.CommandsCount">
            <summary>
            Количество обработанных sctp команд (включая обработанные с ошибками)
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.CommandErrorsCount">
            <summary>
            Количество обработанных с ошибками sctp команд
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.StatisticData.IsInitStat">
            <summary>
            Флаг начального сбора статистики. Другими словами, если это значание равно 1, то статистика была собрана при запуске sctp сервера. Если значание равно 0, то статистика собрана уже во время работы сервера
            </summary>
        </member>
        <member name="T:sctp_client.ClientType">
            <summary>
            Перечислитель типа используемого сокет клиента
            </summary>
        </member>
        <member name="F:sctp_client.ClientType.AsyncClient">
            <summary>
            Асинхронный клиент
            </summary>
        </member>
        <member name="F:sctp_client.ClientType.SyncClient">
            <summary>
            Синхронный клиент
            </summary>
        </member>
        <member name="T:sctp_client.Arguments.ConstrTemplate">
            <summary>
            Шаблон поиска конструкции для команды CmdGetIterateElements
            </summary>
        </member>
        <member name="M:sctp_client.Arguments.ConstrTemplate.#ctor(sctp_client.Arguments.ScAddress,sctp_client.Arguments.ElementType,sctp_client.Arguments.ElementType)">
            <summary>
            Инициализирует шаблон из трех sc-элементов для поиска исходящих дуг из указанного элемента
            </summary>
            <param name="f">Адрес начального sc-элемента</param>
            <param name="a1">Тип исходящей дуги дуги</param>
            <param name="a2">Тип конечного sc-элемента (дуги или узла)</param>
        </member>
        <member name="M:sctp_client.Arguments.ConstrTemplate.#ctor(sctp_client.Arguments.ElementType,sctp_client.Arguments.ElementType,sctp_client.Arguments.ScAddress)">
            <summary>
            Инициализирует шаблон из трех sc-элементов для поиска входящих дуг к указанному элементу.
            </summary>
            <param name="a1">Тип начального sc-элемента</param>
            <param name="a2">Тип входящей дуги</param>
            <param name="f">Адрес конечного sc-элемента</param>
        </member>
        <member name="M:sctp_client.Arguments.ConstrTemplate.#ctor(sctp_client.Arguments.ScAddress,sctp_client.Arguments.ElementType,sctp_client.Arguments.ScAddress)">
            <summary>
            Инициализирует шаблон из трех sc-элементов для поиска дуги между двумя элементами.
            </summary>
            <param name="f1">Адрес начального sc-элемента</param>
            <param name="a1">Тип искомой дуги</param>
            <param name="f2">Адрес конечного sc-элемента</param>
        </member>
        <member name="M:sctp_client.Arguments.ConstrTemplate.#ctor(sctp_client.Arguments.ElementType,sctp_client.Arguments.ElementType,sctp_client.Arguments.ScAddress,sctp_client.Arguments.ElementType,sctp_client.Arguments.ElementType)">
            <summary>
            Инициализирует шаблон из пяти sc-элементов.
            </summary>
            <param name="a1">Тип первого sc-элемента конструкции</param>
            <param name="a2">Тип второго sc-элемента конструкции</param>
            <param name="f">Адрес третьего sc-элемента</param>
            <param name="a3">Тип четвертого sc-элемента конструкции</param>
            <param name="a4">Тип пятого sc-элемента конструкции</param>
        </member>
        <member name="M:sctp_client.Arguments.ConstrTemplate.#ctor(sctp_client.Arguments.ElementType,sctp_client.Arguments.ElementType,sctp_client.Arguments.ScAddress,sctp_client.Arguments.ElementType,sctp_client.Arguments.ScAddress)">
            <summary>
            Инициализирует шаблон из пяти sc-элементов.
            </summary>
            <param name="a1">Тип первого sc-элемента конструкции</param>
            <param name="a2">Тип второго sc-элемента конструкции</param>
            <param name="f1">Адрес третьего sc-элемента</param>
            <param name="a3">Тип четвертого sc-элемента конструкции</param>
            <param name="f2">Адрес пятого sc-элемента</param>
        </member>
        <member name="M:sctp_client.Arguments.ConstrTemplate.#ctor(sctp_client.Arguments.ScAddress,sctp_client.Arguments.ElementType,sctp_client.Arguments.ElementType,sctp_client.Arguments.ElementType,sctp_client.Arguments.ElementType)">
            <summary>
             Инициализирует шаблон из пяти sc-элементов.
            </summary>
            <param name="f">Адрес первого sc-элемента</param>
            <param name="a1">Тип второго sc-элемента конструкции</param>
            <param name="a2">Тип третьего sc-элемента конструкции</param>
            <param name="a3">Тип четвертого sc-элемента конструкции</param>
            <param name="a4">Тип пятого sc-элемента конструкции</param>
        </member>
        <member name="M:sctp_client.Arguments.ConstrTemplate.#ctor(sctp_client.Arguments.ScAddress,sctp_client.Arguments.ElementType,sctp_client.Arguments.ElementType,sctp_client.Arguments.ElementType,sctp_client.Arguments.ScAddress)">
            <summary>
            Инициализирует шаблон из пяти sc-элементов.
            </summary>
            <param name="f1">Адрес первого sc-элемента</param>
            <param name="a1">Тип второго sc-элемента конструкции</param>
            <param name="a2">Тип третьего sc-элемента конструкции</param>
            <param name="a3">Тип четвертого sc-элемента конструкции</param>
            <param name="f2">Адрес пятого sc-элемента</param>
        </member>
        <member name="M:sctp_client.Arguments.ConstrTemplate.#ctor(sctp_client.Arguments.ScAddress,sctp_client.Arguments.ElementType,sctp_client.Arguments.ScAddress,sctp_client.Arguments.ElementType,sctp_client.Arguments.ElementType)">
             <summary>
            Инициализирует шаблон из пяти sc-элементов.
             </summary>
             <param name="f1">Адрес первого sc-элемента</param>
             <param name="a1">Тип второго sc-элемента конструкции</param>
             <param name="f2">Адрес третьего sc-элемента</param>
             <param name="a2">Тип четвертого sc-элемента конструкции</param>
             <param name="a3">Тип пятого sc-элемента конструкции
             </param>
        </member>
        <member name="M:sctp_client.Arguments.ConstrTemplate.#ctor(sctp_client.Arguments.ScAddress,sctp_client.Arguments.ElementType,sctp_client.Arguments.ScAddress,sctp_client.Arguments.ElementType,sctp_client.Arguments.ScAddress)">
            <summary>
            Инициализирует шаблон из пяти sc-элементов.
            </summary>
            <param name="f1">Адрес первого sc-элемента</param>
            <param name="a1">Тип второго sc-элемента конструкции</param>
            <param name="f2">Адрес третьего sc-элемента</param>
            <param name="a2">Тип четвертого sc-элемента конструкции</param>
            <param name="f3">Адрес пятого sc-элемента</param>
        </member>
        <member name="P:sctp_client.Arguments.ConstrTemplate.Length">
            <summary>
            Возвращает длину массива байт шаблона
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.ConstrTemplate.BytesStream">
            <summary>
            Возвращает массив байт шаблона
            </summary>
        </member>
        <member name="T:sctp_client.Arguments.LinkContentType">
            <summary>
            Типы контента ссылки (не используется в связи с непонятками в сервере)
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.LinkContentType.unknown">
            <summary>
            Тип неизвестен или не указан
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.LinkContentType.numeric">
            <summary>
            Число
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.LinkContentType.text">
            <summary>
            Текст
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.LinkContentType.image">
            <summary>
            Изображение
            </summary>
        </member>
        <member name="T:sctp_client.Arguments.ScAddress">
            <summary>
            Адрес sc-элемента в памяти
            </summary>
        </member>
        <member name="M:sctp_client.Arguments.ScAddress.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Инициализирует новый экземпляр структуры <see cref="T:sctp_client.Arguments.ScAddress"/>
            </summary>
            <param name="segment">Сегмент</param>
            <param name="offset">Смещение</param>
        </member>
        <member name="M:sctp_client.Arguments.ScAddress.GetFromBytes(System.Byte[],System.Int32)">
            <summary>
            Получает значение адреса из массива байт
            </summary>
            <param name="bytesstream">Массив байт </param>
            <param name="offset">Смещение в массиве</param>
            <returns></returns>
        </member>
        <member name="P:sctp_client.Arguments.ScAddress.Length">
            <summary>
            Возвращает длину массива байт адреса
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.ScAddress.BytesStream">
            <summary>
            Возвращает массив байт адреса
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.ScAddress.Segment">
            <summary>
            Возвращает значение сегмента адреса
            </summary>
            <value>
            Сегмент
            </value>
        </member>
        <member name="P:sctp_client.Arguments.ScAddress.Offset">
            <summary>
            Возвращает значение смещения адреса
            </summary>
            <value>
            Смещение адреса
            </value>
        </member>
        <member name="M:sctp_client.Commands.Command.CheckElement(sctp_client.Arguments.ScAddress)">
            <summary>
            Проверка существования элемента с указанным sc-адресом
            </summary>
            <param name="address">sc-адрес проверяемого sc-элемента</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.CreateArc(sctp_client.Arguments.ElementType,sctp_client.Arguments.ScAddress,sctp_client.Arguments.ScAddress)">
            <summary>
            Создание новой sc-дуги указанного типа, с указнным начальным и конечным элементами
            </summary>
            <param name="arctype">тип создаваемой sc-дуги</param>
            <param name="beginaddress">sc-адрес начального элемента sc-дуги</param>
            <param name="endaddress">sc-адрес конечного элемента sc-дуги</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.CreateLink">
            <summary>
            Создание новой sc-ссылки
            </summary>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.CreateNode(sctp_client.Arguments.ElementType)">
            <summary>
            Создание нового sc-узла указанного типа
            </summary>
            <param name="nodetype">тип создаваемого sc-узла</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.DeleteElement(sctp_client.Arguments.ScAddress)">
            <summary>
            Удаление sc-элемента с указанным sc-адресом
            </summary>
            <param name="address"> sc-адрес удаляемого sc-элемента</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.FindElementById(sctp_client.Arguments.Identifier)">
            <summary>
            Поиск sc-элемента по его системному идентификатору
            </summary>
            <param name="identifier">Идентификатор</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.FindLinks(sctp_client.Arguments.LinkContent)">
            <summary>
            Поиск всех sc-ссылок с указанным содержимым
            </summary>
            <param name="linkcontent">содержимое для поиска </param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.GetArcBegin(sctp_client.Arguments.ScAddress)">
            <summary>
            Получение начального элемента sc-дуги
            </summary>
            <param name="address">sc-адрес дуги у которой необходимо получить начальный элемент</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.GetArcEnd(sctp_client.Arguments.ScAddress)">
            <summary>
            Получение конечного элемента sc-дуги
            </summary>
            <param name="address">sc-адрес дуги у которой необходимо получить конечный элемент</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.GetElementType(sctp_client.Arguments.ScAddress)">
            <summary>
            Получение типа sc-элемента по sc-адресу
            </summary>
            <param name="address">sc-адрес элемента для получения типа</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.GetLinkContent(sctp_client.Arguments.ScAddress)">
            <summary>
            Получение содержимого sc-ссылки
            </summary>
            <param name="address">sc-адрес ссылки для получения содержимого</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.GetStatistics(sctp_client.Arguments.DateTimeUNIX,sctp_client.Arguments.DateTimeUNIX)">
            <summary>
            Получение статистики с сервера, в ременных границах.
            </summary>
            <param name="starttime">Нижняя временная граница</param>
            <param name="endtime">Верхняя временная граница</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.IterateElements(sctp_client.Arguments.ConstrTemplate)">
            <summary>
            Найти конструкции по указанному 3-х или 5-ти элементному шаблону
            </summary>
            <param name="itertemplate">Шаблон для поиска</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.ServerShutDown">
            <summary>
            Остановка сервера
            </summary>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.SetLinkContent(sctp_client.Arguments.ScAddress,sctp_client.Arguments.LinkContent)">
            <summary>
            Установка содержимого sc-ссылки
            </summary>
            <param name="address">sc-адрес ссылки </param>
            <param name="linkcontent">данные устанавливаемого содержимого</param>
            <returns></returns>
        </member>
        <member name="M:sctp_client.Commands.Command.SetSysId(sctp_client.Arguments.ScAddress,sctp_client.Arguments.Identifier)">
            <summary>
            Установка системного идентификатора sc-элемента
            </summary>
            <param name="address"> адрес sc-эелемента </param>
            <param name="identifier">Идентификатор</param>
            <returns></returns>
        </member>
        <member name="T:sctp_client.CallBacks.enumReturnCode">
            <summary>
            Коды выполнения команды
            </summary>
        </member>
        <member name="F:sctp_client.CallBacks.enumReturnCode.Successfull">
            <summary>
            Успешное выполнение команды
            </summary>
        </member>
        <member name="F:sctp_client.CallBacks.enumReturnCode.Unsuccessful">
            <summary>
            Безуспешное выполнение команды
            </summary>
        </member>
        <member name="F:sctp_client.CallBacks.enumReturnCode.ScAddressError">
            <summary>
            Указанный sc-элемент не найден (не верный sc-адрес)
            </summary>
        </member>
        <member name="T:sctp_client.Arguments.Identifier">
            <summary>
            Идентификатор sc-элемента
            </summary>
        </member>
        <member name="M:sctp_client.Arguments.Identifier.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:sctp_client.Arguments.Identifier"/>
            </summary>
            <param name="value">Значение идентификатора</param>
        </member>
        <member name="M:sctp_client.Arguments.Identifier.ToString">
            <summary>
            Возвращает строковое представление идентификатора
            </summary>
            <returns>
            Объект типа <see cref="T:System.String" />, содержащий строковое представление идентификатора
            </returns>
        </member>
        <member name="P:sctp_client.Arguments.Identifier.BytesStream">
            <summary>
            Возвращает массив байт идентификатора
            </summary>
            <value>
            Массив байт
            </value>
        </member>
        <member name="P:sctp_client.Arguments.Identifier.Length">
            <summary>
            Возвращает длину массива байт идентификатора
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="T:sctp_client.Arguments.Construction">
            <summary>
            sc-конструкция, представленная в виде sc-адресов
            </summary>
        </member>
        <member name="M:sctp_client.Arguments.Construction.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:sctp_client.Arguments.Construction"/>
            </summary>
        </member>
        <member name="P:sctp_client.Arguments.Construction.ScAdresses">
            <summary>
            Содержит sc-адреса элементов конструкции
            </summary>
        </member>
        <member name="T:sctp_client.CallBacks.CommandDoneEventHandler">
            <summary>
            Делегат для события завершения выполнения команды
            </summary>
            <param name="sender">Команда</param>
            <param name="arg">Данные события</param>
        </member>
        <member name="T:sctp_client.CallBacks.CommandDoneEventArgs">
            <summary>
            Данные события завершения исполнения команды
            </summary>
        </member>
        <member name="P:sctp_client.CallBacks.CommandDoneEventArgs.ReturnCode">
            <summary>
            Возвращает и задает код окончания выполнения команд
            </summary>
            <value>
            Код окончания выполнения команды
            </value>
        </member>
        <member name="T:sctp_client.Arguments.LinkContent">
            <summary>
            Структра представляет контент sc-ссылки. Пока поддерживаются только строки
            </summary>
        </member>
        <member name="M:sctp_client.Arguments.LinkContent.ConvertToString(System.Byte[])">
            <summary>
            Конвертирует байтовое представление контента ссылки в строковое
            </summary>
            <param name="bytecontent">Массив байт ссылки</param>
            <returns></returns>
        </member>
        <member name="P:sctp_client.Arguments.LinkContent.ContentType">
            <summary>
            Возвращает тип (OSTIS) контента ссылки. Пока поддерживается только текст
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.unknown">
            <summary>
            Не известный или не указанный тип
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_node">
            <summary>
            sc-узел общего вида
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_link">
            <summary>
            sc-ссылка общего вида
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_edge_common">
            <summary>
            sc-ребро общего вида
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_arc_common">
            <summary>
            sc-дуга общего вида
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_arc_access">
            <summary>
            sc-дуга принадлежностии
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_const">
            <summary>
            Константный тип sc-элемента
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_var">
            <summary>
            Переменный тип sc-элемента
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_arc_pos">
            <summary>
            Позитивная sc-дуга
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_arc_neg">
            <summary>
            Негативная sc-дуга
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_arc_fuz">
            <summary>
            Нечеткая sc-дуга
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_arc_temp">
            <summary>
            Нестационарная sc-дуга
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_arc_perm">
            <summary>
            Стационарная sc-дуга
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_node_tuple">
            <summary>
            sc-узел, обозначающий небинарную связку
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_node_struct">
            <summary>
            sc-узел, обозначающий структуру
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_node_role">
            <summary>
            sc-узел, обозначающий ролевое отношение
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_node_norole">
            <summary>
            sc-узел, обозначающий неролевое отношение
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_node_class">
            <summary>
            sc-узел, не являющейся отношением
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_node_abstract">
            <summary>
            sc-узел, обозначающий абстрактный объект, не являющийся множеством
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_node_material">
            <summary>
            sc-узел, обозначающий материальный объект
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_arc_pos_const_perm">
            <summary>
            Позитивная константная стационарная sc-дуга принадлежности
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_element_mask">
            <summary>
            Маска, означающая все sc-элементы
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_constancy_mask">
            <summary>
            Маска константности/переменности
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_positivity_mask">
            <summary>
            Маска позитивности/негативности/нечеткости
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_permanency_mask">
            <summary>
            Маска стационарности/нестационарности
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_node_struct_mask">
            <summary>
            Маска типов узлов
            </summary>
        </member>
        <member name="F:sctp_client.Arguments.ElementType.sc_type_arc_mask">
            <summary>
            Маска типов sc-коннекторов
            </summary>
        </member>
    </members>
</doc>
